@using Collabim.CustomSearch.Business

@inject ISearchService SearchService
@inject IJSRuntime JSRuntime

<div class="w-100">
   <div class="p-3">
      <h1>Custom Search</h1>
   </div>

   <div class="mb-3">
      <input id="searchTextInput" title="" placeholder="" autocomplete="on"
             class="col-12 col-sm-8 col-md-6 col-lg-4 h-100 mb-1 border border-1 rounded-pill text-center me-3 h-40"
             @bind="SearchText" @bind:event="oninput" @onkeydown="@OnSearchTextKeyDown" />

      <button id="searchButton" type="button" class="btn btn-primary h-100 col-12 col-sm-3 col-md-3 col-lg-3 col-xl-2"
              @onclick="OnSearchClick">
         @if (_loading)
         {
            <span class="spinner-border spinner-border-sm"></span>
         }
         Search
      </button>
   </div>

</div>


@code {


   [Parameter]
   public string SearchText { get; set; } = string.Empty;

   private bool _loading = false;

   protected override async Task OnAfterRenderAsync(bool firstRender)
   {
      if (firstRender)
      {
         await Focus("searchTextInput");
      }
   }

   [Parameter] public EventCallback<string> OnSearchClickevent { get; set; }

   private async Task OnSearchClick()
   {
      _loading = true;
     
      await OnSearchClickevent.InvokeAsync(SearchText);
     
      _loading = false;
   }

   public async Task OnSearchTextKeyDown(KeyboardEventArgs e)
   {
      if (e.Code == "Enter" || e.Code == "NumpadEnter")
      {
         await OnSearchClick();
      }
   }

   public async Task Focus(string elementId)
   {
      await JSRuntime.InvokeVoidAsync("jsfunction.focusElement", elementId);
   }
  
}
